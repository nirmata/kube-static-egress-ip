/*
Copyright 2017 Nirmata inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/nirmata/kube-static-egress-ip/pkg/apis/egressip/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StaticEgressIPLister helps list StaticEgressIPs.
type StaticEgressIPLister interface {
	// List lists all StaticEgressIPs in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.StaticEgressIP, err error)
	// StaticEgressIPs returns an object that can list and get StaticEgressIPs.
	StaticEgressIPs(namespace string) StaticEgressIPNamespaceLister
	StaticEgressIPListerExpansion
}

// staticEgressIPLister implements the StaticEgressIPLister interface.
type staticEgressIPLister struct {
	indexer cache.Indexer
}

// NewStaticEgressIPLister returns a new StaticEgressIPLister.
func NewStaticEgressIPLister(indexer cache.Indexer) StaticEgressIPLister {
	return &staticEgressIPLister{indexer: indexer}
}

// List lists all StaticEgressIPs in the indexer.
func (s *staticEgressIPLister) List(selector labels.Selector) (ret []*v1alpha1.StaticEgressIP, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StaticEgressIP))
	})
	return ret, err
}

// StaticEgressIPs returns an object that can list and get StaticEgressIPs.
func (s *staticEgressIPLister) StaticEgressIPs(namespace string) StaticEgressIPNamespaceLister {
	return staticEgressIPNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StaticEgressIPNamespaceLister helps list and get StaticEgressIPs.
type StaticEgressIPNamespaceLister interface {
	// List lists all StaticEgressIPs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.StaticEgressIP, err error)
	// Get retrieves the StaticEgressIP from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.StaticEgressIP, error)
	StaticEgressIPNamespaceListerExpansion
}

// staticEgressIPNamespaceLister implements the StaticEgressIPNamespaceLister
// interface.
type staticEgressIPNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all StaticEgressIPs in the indexer for a given namespace.
func (s staticEgressIPNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.StaticEgressIP, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StaticEgressIP))
	})
	return ret, err
}

// Get retrieves the StaticEgressIP from the indexer for a given namespace and name.
func (s staticEgressIPNamespaceLister) Get(name string) (*v1alpha1.StaticEgressIP, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("staticegressip"), name)
	}
	return obj.(*v1alpha1.StaticEgressIP), nil
}
